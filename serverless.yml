service: staticnews

provider:
  name: aws
  # The AWS region in which to deploy (us-east-1 is the default)
  region: eu-central-1
  # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
  stage: production
  runtime: provided.al2
  httpApi:
    cors: true
  vpc:
    securityGroupIds:
      - sg-0d12c4e050bd8b3ac
    subnetIds:
      - subnet-098c1bf3f15e5ff19
  environment:
    QUEUE_CONNECTION: sqs
    SQS_QUEUE: ${construct:jobs.queueUrl}
    FILESYSTEM_DISK: s3
    TABLES_FILESYSTEM_DRIVER: s3
    FORMS_FILESYSTEM_DRIVER: s3
    FILAMENT_FILESYSTEM_DRIVER: s3
    AWS_BUCKET: !Ref Storage
    APP_NAME: Staticnews
    APP_ENV: local
    APP_KEY: "base64:aQYnBivcqesBAqaT5wkC7I5NvpDAADoMkd5DLRTo3+s="
    APP_DEBUG: true
    DB_CONNECTION: mysql
    DB_HOST: staticnews-db.cpkrawbnohun.eu-central-1.rds.amazonaws.com
    DB_PORT: 3306
    DB_DATABASE: staticnews
    DB_USERNAME: fxbJifqhtT05
    DB_PASSWORD: 1Tos2V2gMQBi
  iam:
    role:
      statements:
        - Effect: Allow
          Action: s3:*
          Resource:
            - !Sub '${Storage.Arn}' # the storage bucket
            - !Sub '${Storage.Arn}/*' # and everything inside

package:
  # Directories to exclude from deployment
  patterns:
    - '!node_modules/**'
    - '!public/storage'
    - '!resources/assets/**'
    - '!storage/framework/**'
    - '!storage/app/public/**'
    - '!storage/logs/**'
    - '!tests/**'

functions:
  cronjob:
    handler: artisan
    layers:
      - ${bref:layer.php-82}
    events:
      - schedule:
          rate: rate(1 minute)
          input:
            - '"schedule:run"'
  web:
    handler: public/index.php
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-82-fpm}
    events:
      - httpApi: '*'
  # This function lets us run artisan commands in Lambda
  artisan:
    handler: artisan
    timeout: 120 # in seconds
    layers:
      - ${bref:layer.php-82} # PHP
      - ${bref:layer.console} # The "console" layer

constructs:
  jobs:
    type: queue
    worker:
      handler: worker.php
      layers:
        - ${bref:layer.php-82}

resources:
  Resources:
    Storage:
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - POST
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
      Type: AWS::S3::Bucket
    StorageBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref Storage # References the bucket we defined above
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*' # everyone
              Action: 's3:GetObject' # to read
              Resource: !Sub '${Storage.Arn}/*' # things in the bucket

plugins:
  - ./vendor/bref/bref
  - serverless-lift
